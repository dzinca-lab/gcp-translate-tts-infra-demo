name: Terraform Deploy via WIF

on:
  workflow_dispatch:
  push:
    branches: [main]
permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: Build Functions
    runs-on: ubuntu-latest
    environment: PROD
    env:
      CODE_BUCKET: ttts-code
      CODE_BUCKET_REGION: "us-central1"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' 

      - name: Install dependencies
        working-directory: ./apps/translation
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Zip function code
        working-directory: ./apps/translation 
        run: |
          zip -r cloud_function_translate_source.zip .
    

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          token_format: "access_token"
          workload_identity_provider: "projects/${{ secrets.GCP_PROJECT_NUMBER}}/locations/global/workloadIdentityPools/${{ vars.POOL_ID }}/providers/${{ vars.PROVIDER_ID }}"
          service_account: ${{ vars.SERVICE_ACCOUNT_NAME }}

      - name: Install gcloud CLI
        uses: google-github-actions/setup-gcloud@v2

      - name: Ensure GCS bucket exists for function code
        run: |
          chmod +x ./scripts/create_bucket.sh
          ./scripts/create_bucket.sh ${{ vars.GCP_PROJECT_ID }} $CODE_BUCKET $CODE_BUCKET_REGION 

      - name: Upload Artifacts to GCS
        run: |
            gsutil cp ./apps/translation/cloud_function_translate_source.zip gs://${{ vars.GCP_PROJECT_ID }}-$CODE_BUCKET

  plan:
    runs-on: ubuntu-latest
    environment: PROD
    needs: build
    env:
      STATE_BUCKET: tf-state-production
      STATE_BUCKET_REGION: "us-central1"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          token_format: "access_token"
          workload_identity_provider: "projects/${{ secrets.GCP_PROJECT_NUMBER}}/locations/global/workloadIdentityPools/${{ vars.POOL_ID }}/providers/${{ vars.PROVIDER_ID }}"
          service_account: ${{ vars.SERVICE_ACCOUNT_NAME }}

      - name: Install gcloud CLI
        uses: google-github-actions/setup-gcloud@v2

      - name: Ensure GCS bucket exists for Terraform state
        run: |
          chmod +x ./scripts/create_bucket.sh
          ./scripts/create_bucket.sh ${{ vars.GCP_PROJECT_ID }} $STATE_BUCKET $STATE_BUCKET_REGION 

      - name: Generate backend config
        run: |
          cat > backend.hcl <<EOF
          bucket = "${{ vars.GCP_PROJECT_ID }}-$STATE_BUCKET"
          prefix = "terraform/"
          EOF
        env:
          ENV_NAME: "production"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Initialize Terraform
        run: terraform init -backend-config=backend.hcl

      - name: Run Terraform Plan
        run: terraform plan -out=tfplan -input=false
        env:
          ENV_NAME: "production"
          TF_VAR_project_id: ${{ vars.GCP_PROJECT_ID }}
          TF_VAR_gcp_region: ${{ vars.GCP_REGION }}

      - name: Copy Artifacts
        run: |
          mkdir -p output
          cp backend.hcl output/
          cp tfplan output/

      - name: Upload Terraform Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: terraform-config
          path: output/

  apply:
    runs-on: ubuntu-latest
    needs: plan
    environment: PROD
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          token_format: "access_token"
          workload_identity_provider: "projects/${{ secrets.GCP_PROJECT_NUMBER}}/locations/global/workloadIdentityPools/${{ vars.POOL_ID }}/providers/${{ vars.PROVIDER_ID }}"
          service_account: ${{ vars.SERVICE_ACCOUNT_NAME }}

      - name: Install gcloud CLI
        uses: google-github-actions/setup-gcloud@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Download Terraform Artifacts
        uses: actions/download-artifact@v4
        with:
          name: terraform-config
          path: .

      - name: Download Functions Artifacts
        uses: actions/download-artifact@v4
        with:
          name: translation-function
          path: .

      - name: Initialize Terraform
        run: terraform init -backend-config=backend.hcl

      - name: Run Terraform Apply
        run: terraform apply -input=false -auto-approve tfplan
        env:
          ENV_NAME: "production"
          TF_VAR_project_id: ${{ vars.GCP_PROJECT_ID }}
          TF_VAR_gcp_region: ${{ vars.GCP_REGION }}
          TF_VAR_code_bucket: ${{ vars.GCP_PROJECT_ID }}-${{ env.CODE_BUCKET }}
          TF_VAR_code_bucket_region: ${{ env.CODE_BUCKET_REGION }}
          TF_VAR_state_bucket: ${{ vars.GCP_PROJECT_ID }}-${{ env.STATE_BUCKET }}
          TF_VAR_state_bucket_region: ${{ env.STATE_BUCKET_REGION }}
          TF_VAR_function_name: ${{ vars.FUNCTION_NAME }}
          TF_VAR_function_region: ${{ vars.GCP_REGION }}
          TF_VAR_function_source: gs://${{ vars.GCP_PROJECT_ID }}-${{ env.CODE_BUCKET }}/cloud_function_translate_source.zip
          TF_VAR_function_entry_point: ${{ vars.FUNCTION_ENTRY_POINT }}
          TF_VAR_function_runtime: ${{ vars.FUNCTION_RUNTIME }}
          TF_VAR_function_timeout: ${{ vars.FUNCTION_TIMEOUT }}
          TF_VAR_function_memory: ${{ vars.FUNCTION_MEMORY }}
          TF_VAR_function_trigger_http: ${{ vars.FUNCTION_TRIGGER_HTTP }}