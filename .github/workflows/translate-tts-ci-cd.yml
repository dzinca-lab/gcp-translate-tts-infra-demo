## GitHub Actions Workflow for Translate & Text To Speech Solution Deployment

# This workflow automates the continuous integration and deployment (CI/CD) process for a translation and text-to-speech solution on Google Cloud Platform (GCP). It performs the following key actions on pull requests to the main branch:

# 1. Builds and uploads cloud functions for translation and text-to-speech
# 2. Conducts security scanning using Checkov
# 3. Runs Terraform plan and apply operations for infrastructure deployment

# The workflow uses GitHub Actions with Google Cloud Platform (GCP) authentication via Workload Identity (a method for securely accessing GCP resources without service account keys). For more details, see the [Workload Identity documentation](https://cloud.google.com/iam/docs/workload-identity-federation). It supports automated infrastructure provisioning and function deployment.
---

name: Translate & Text To Speech Solution Deployment
on:
  pull_request:
    branches: [main]
  workflow_dispatch: 
    
env:
  FUNCTION_ARCHIVE_PREFIX: cloud_function_source_${{ github.sha}}
permissions:
  id-token: write
  contents: read
  actions: read
  security-events: write
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  build:
    name: Build Functions
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: projects/${{ secrets.GCP_PROJECT_NUMBER}}/locations/global/workloadIdentityPools/${{ vars.POOL_ID }}/providers/${{ vars.PROVIDER_ID }}
          service_account: ${{ vars.SERVICE_ACCOUNT_NAME }}
      - name: Install gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
      - name: Ensure GCS bucket exists for function artifacts
        run: |
          chmod +x ./scripts/create_bucket.sh
          ./scripts/create_bucket.sh ${{ vars.GCP_PROJECT_ID }} ${{ vars.CODE_BUCKET_SUFFIX }} ${{ vars.GCP_REGION }}
        
      - name: Build and Upload Translation Cloud Function
        id: build_translate_function
        uses: ./.github/actions/build-and-upload-function
        with:
          working-directory: ./apps/translation
          code-bucket: ${{ vars.CODE_BUCKET_SUFFIX }}
          gcp-project-id: ${{ vars.GCP_PROJECT_ID }}
          function-artifact-name: ${{ env.FUNCTION_ARCHIVE_PREFIX }}-translate-function.zip
      - name: Build and Upload Text to Speech Cloud Function
        id: build_speech_function
        uses: ./.github/actions/build-and-upload-function
        with:
          working-directory: ./apps/text-to-speech
          code-bucket: ${{ vars.CODE_BUCKET_SUFFIX }}
          gcp-project-id: ${{ vars.GCP_PROJECT_ID }}
          function-artifact-name: ${{ env.FUNCTION_ARCHIVE_PREFIX }}-text-to-speech-function.zip
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Checkov scan
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform,github_actions
          quiet: false
          soft_fail: true
          output_format: sarif
          output_file: checkov-results.sarif
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: success() || failure()
        with:
          sarif_file: ./checkov-results.sarif
          category: checkov
  plan:
    runs-on: ubuntu-latest
    name: Terraform Plan
    environment: production
    needs: build
    env:
      STATE_BUCKET: tf-state-production
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: projects/${{ secrets.GCP_PROJECT_NUMBER}}/locations/global/workloadIdentityPools/${{ vars.POOL_ID }}/providers/${{ vars.PROVIDER_ID }}
          service_account: ${{ vars.SERVICE_ACCOUNT_NAME }}
      - name: Install gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
      - name: Ensure GCS bucket exists for Terraform state
        run: |
          chmod +x ./scripts/create_bucket.sh
          ./scripts/create_bucket.sh ${{ vars.GCP_PROJECT_ID }} $STATE_BUCKET ${{ vars.GCP_REGION}} 

      - name: Generate backend config
        run: |
          cat > backend.hcl <<EOF
          bucket = "${{ vars.GCP_PROJECT_ID }}-$STATE_BUCKET"
          prefix = "terraform/"
          EOF

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Initialize Terraform
        run: terraform init -backend-config=backend.hcl
      - name: Run Terraform Plan
        run: terraform plan -out=tfplan -input=false
        env:
          TF_VAR_cloud_function_archive_prefix: ${{ env.FUNCTION_ARCHIVE_PREFIX }}
          TF_VAR_project_id: ${{ vars.GCP_PROJECT_ID }}
          TF_VAR_gcp_region: ${{ vars.GCP_REGION }}
          TF_VAR_target_language: ${{ vars.TARGET_LANGUAGE }}
          TF_VAR_code_bucket_name: ${{ vars.GCP_PROJECT_ID }}-${{ env.CODE_BUCKET }}
          TF_VAR_python_version: ${{ vars.PYTHON_VERSION }}
          TF_VAR_code_bucket_suffix: ${{ vars.CODE_BUCKET_SUFFIX }}
      - name: Copy Artifacts
        run: |
          mkdir -p output
          cp backend.hcl output/
          cp tfplan output/

      - name: Upload Terraform Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: terraform-config
          path: output/
  apply:
    runs-on: ubuntu-latest
    name: Terraform Apply
    needs: plan
    environment: production
    if: github.event_name == 'workflow_dispatch' || github.ref_name == 'main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: projects/${{ secrets.GCP_PROJECT_NUMBER}}/locations/global/workloadIdentityPools/${{ vars.POOL_ID }}/providers/${{ vars.PROVIDER_ID }}
          service_account: ${{ vars.SERVICE_ACCOUNT_NAME }}
      - name: Install gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Download Terraform Artifacts
        uses: actions/download-artifact@v4
        with:
          name: terraform-config
          path: .
      - name: Initialize Terraform
        run: terraform init -backend-config=backend.hcl
      - name: Run Terraform Apply
        run: terraform apply -input=false -auto-approve tfplan